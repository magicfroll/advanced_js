// Promise.all()
// Принимает массив (или любой другой итерируемый объект) промисов и возвращает
// новый промис. Переданные промисы будут выполнены по порядку
// последовательно, результатом выполнения будет массив результатов из каждого
// промиса. Если в каком-то промисе произойдёт ошибка, то результатом выполнения
// будет эта ошибка, остальные результаты проигнорируются. Выполнение промисов
// не прервётся, так как сейчас в самом классе промисов нет возможности для отмены
// запроса и вернут какой-то результат. Но этот результат будет проигнорирован, а
// управление передаётся в метод catch() для всего Promise.all().

Promise.all([
    new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(1)
        }, 1000);
    }),
    new Promise((resolve, reject) => {
        setTimeout(() => {
            reject(new Error('Error!'))
        }, 2000);
    }),
    new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(3)
        }, 3000);
    })
])
    .then(console.log)
    .catch(console.log);